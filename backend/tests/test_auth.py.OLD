from flask import url_for, redirect
from models import User
from app.extensions import oauth

def test_login_redirects_to_auth0(client, mocker):
    """Test that /login route calls Auth0's authorize_redirect."""
    
    mock_authorize = mocker.patch.object(oauth.auth0, 'authorize_redirect', autospec=True)
    mock_authorize.return_value = redirect(url_for('main.home')) # Dummy redirect

    response = client.get(url_for('auth.login'))

    
    mock_authorize.assert_called_once() # Assert mock was called once with expected redirect_uri

    # Mock arg validation
    args, kwargs = mock_authorize.call_args
    assert 'redirect_uri' in kwargs
    assert kwargs['redirect_uri'] == url_for('auth.callback', _external=True)
    # assert response.status_code == 302 # If mock returned a real redirect

def test_callback_new_user(client, session, mocker):
    """Test the /callback route when a new user logs in."""

    # Mock Auth0 token exchange
    mock_authorize_token = mocker.patch.object(oauth.auth0, 'authorize_access_token', autospec=True)
    mock_authorize_token.return_value = {
        'access_token': 'dummy_access_token', 'token_type': 'Bearer',
        'userinfo': {
            'sub': 'auth0|newuser123', 'name': 'Test New User',
            'email': 'new.user@example.com', 'email_verified': True
        }
    }

    response = client.get(url_for('auth.callback'), follow_redirects=True)

    assert response.status_code == 200
    assert b"Dashboard" in response.data

    user = session.query(User).filter_by(auth0_subject='auth0|newuser123').first()
    assert user is not None
    assert user.email == 'new.user@example.com'

    # Check Flask's session via the client AFTER the request ---
    dashboard_response = client.get(url_for('main.dashboard'))
    assert dashboard_response.status_code == 200